import React, { useState, useEffect } from "react";
import { fetchUsers, deleteUser, updateUser } from "./services/addUser";
import { FormData } from "./interfaces/users";
import CreateNewUser from "./components/create-new-user";
import DeleteIcon from "./components/icons/DeleteIcon";
import EditIcon from "./components/icons/EditIcon";
import "./App.css";

function App() {
  const [data, setData] = useState<FormData[] | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [editingUser, setEditingUser] = useState<FormData | null>(null);

  const handleOpen = () => setShowModal(true);
  const handleClose = () => {
    setShowModal(false);
    setEditingUser(null);
  };

  useEffect(() => {
    fetchUsers()
      .then((userData: React.SetStateAction<FormData[] | null>) => {
        console.log(userData);
        setData(userData);
      })
      .catch((err: unknown) => {
        console.warn("Something went wrong.", err);
      });
  }, []);

  const handleDeleteUser = (id: number) => {
    deleteUser(id)
      .then(() => {
        setData(
          (prevData) => prevData?.filter((user) => user.id !== id) || null
        );
      })
      .catch((err: unknown) => {
        console.warn("Error deleting user:", err);
      });
  };

  const handleUpdateUser = (id: number, updatedUserData: FormData) => {
    updateUser(id, updatedUserData)
      .then(() => {
        setData((prevData) => {
          if (!prevData) return null;
          return prevData.map((user) => {
            if (user.id === id) {
              return updatedUserData; // Replace the user with updated data
            }
            return user;
          });
        });
      })
      .catch((err: unknown) => {
        console.warn("Error updating user:", err);
      });
  };

  const handleAddUser = (newUser: FormData) => {
    setData((prevData) => (prevData ? [...prevData, newUser] : [newUser]));
  };

  const handleEditUser = (user: FormData) => {
    setEditingUser(user);
    setShowModal(true);
  };

  if (!data) {
    return <div>Loading...</div>;
  }

  return (
    <section className="layout">
      <div className="container">
        <button className="create-button" onClick={handleOpen}>
          + Create new user
        </button>
      </div>

      <div>
        <div className="gridTable">
          <h1>Id</h1>
          <h1>Name</h1>
          <h1>Email</h1>
          <h1>Phone</h1>
          <h1>Action</h1>
        </div>
        {data.map((el) => {
          return (
            <div className="gridTable rounding-border" key={el.id}>
              <p>{el.id}</p>
              <p>{el.name}</p>
              <p>{el.email}</p>
              <p>{el.phone}</p>
              <div className="icons">
                <span onClick={() => handleEditUser(el)}>
                  <EditIcon />
                </span>

                <span onClick={() => handleDeleteUser(el.id)}>
                  <DeleteIcon />
                </span>
              </div>
            </div>
          );
        })}
      </div>

      {showModal && (
        <CreateNewUser
          onClose={handleClose}
          onAddUser={handleAddUser}
          editingUser={editingUser}
          onUpdateUser={(updatedUserData: FormData) =>
            handleUpdateUser(editingUser!.id, updatedUserData)
          }
        />
      )}
    </section>
  );
}

export default App;
